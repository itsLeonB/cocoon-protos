// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: friendship/friendship_service.proto

package friendship

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FriendshipService_CreateAnonymous_FullMethodName = "/friendship.FriendshipService/CreateAnonymous"
	FriendshipService_GetAll_FullMethodName          = "/friendship.FriendshipService/GetAll"
	FriendshipService_GetDetails_FullMethodName      = "/friendship.FriendshipService/GetDetails"
	FriendshipService_IsFriends_FullMethodName       = "/friendship.FriendshipService/IsFriends"
	FriendshipService_GetNames_FullMethodName        = "/friendship.FriendshipService/GetNames"
)

// FriendshipServiceClient is the client API for FriendshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendshipServiceClient interface {
	CreateAnonymous(ctx context.Context, in *NewAnonymousFriendshipRequest, opts ...grpc.CallOption) (*FriendshipResponse, error)
	GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*FriendDetails, error)
	IsFriends(ctx context.Context, in *IsFriendsRequest, opts ...grpc.CallOption) (*IsFriendsResponse, error)
	GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*GetNamesResponse, error)
}

type friendshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendshipServiceClient(cc grpc.ClientConnInterface) FriendshipServiceClient {
	return &friendshipServiceClient{cc}
}

func (c *friendshipServiceClient) CreateAnonymous(ctx context.Context, in *NewAnonymousFriendshipRequest, opts ...grpc.CallOption) (*FriendshipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendshipResponse)
	err := c.cc.Invoke(ctx, FriendshipService_CreateAnonymous_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) GetAll(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, FriendshipService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*FriendDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FriendDetails)
	err := c.cc.Invoke(ctx, FriendshipService_GetDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) IsFriends(ctx context.Context, in *IsFriendsRequest, opts ...grpc.CallOption) (*IsFriendsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsFriendsResponse)
	err := c.cc.Invoke(ctx, FriendshipService_IsFriends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendshipServiceClient) GetNames(ctx context.Context, in *GetNamesRequest, opts ...grpc.CallOption) (*GetNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNamesResponse)
	err := c.cc.Invoke(ctx, FriendshipService_GetNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendshipServiceServer is the server API for FriendshipService service.
// All implementations must embed UnimplementedFriendshipServiceServer
// for forward compatibility.
type FriendshipServiceServer interface {
	CreateAnonymous(context.Context, *NewAnonymousFriendshipRequest) (*FriendshipResponse, error)
	GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*FriendDetails, error)
	IsFriends(context.Context, *IsFriendsRequest) (*IsFriendsResponse, error)
	GetNames(context.Context, *GetNamesRequest) (*GetNamesResponse, error)
	mustEmbedUnimplementedFriendshipServiceServer()
}

// UnimplementedFriendshipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFriendshipServiceServer struct{}

func (UnimplementedFriendshipServiceServer) CreateAnonymous(context.Context, *NewAnonymousFriendshipRequest) (*FriendshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnonymous not implemented")
}
func (UnimplementedFriendshipServiceServer) GetAll(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedFriendshipServiceServer) GetDetails(context.Context, *GetDetailsRequest) (*FriendDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedFriendshipServiceServer) IsFriends(context.Context, *IsFriendsRequest) (*IsFriendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFriends not implemented")
}
func (UnimplementedFriendshipServiceServer) GetNames(context.Context, *GetNamesRequest) (*GetNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNames not implemented")
}
func (UnimplementedFriendshipServiceServer) mustEmbedUnimplementedFriendshipServiceServer() {}
func (UnimplementedFriendshipServiceServer) testEmbeddedByValue()                           {}

// UnsafeFriendshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendshipServiceServer will
// result in compilation errors.
type UnsafeFriendshipServiceServer interface {
	mustEmbedUnimplementedFriendshipServiceServer()
}

func RegisterFriendshipServiceServer(s grpc.ServiceRegistrar, srv FriendshipServiceServer) {
	// If the following call pancis, it indicates UnimplementedFriendshipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FriendshipService_ServiceDesc, srv)
}

func _FriendshipService_CreateAnonymous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAnonymousFriendshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).CreateAnonymous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_CreateAnonymous_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).CreateAnonymous(ctx, req.(*NewAnonymousFriendshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).GetAll(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_IsFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFriendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).IsFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_IsFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).IsFriends(ctx, req.(*IsFriendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendshipService_GetNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendshipServiceServer).GetNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendshipService_GetNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendshipServiceServer).GetNames(ctx, req.(*GetNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendshipService_ServiceDesc is the grpc.ServiceDesc for FriendshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "friendship.FriendshipService",
	HandlerType: (*FriendshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnonymous",
			Handler:    _FriendshipService_CreateAnonymous_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _FriendshipService_GetAll_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _FriendshipService_GetDetails_Handler,
		},
		{
			MethodName: "IsFriends",
			Handler:    _FriendshipService_IsFriends_Handler,
		},
		{
			MethodName: "GetNames",
			Handler:    _FriendshipService_GetNames_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friendship/friendship_service.proto",
}
